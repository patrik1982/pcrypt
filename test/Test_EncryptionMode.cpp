#include "Test_EncryptionMode.h"
#include "Test_Common.h"

#include "Rijndael.h"

#include "ECB.h"
#include "CBC.h"
#include "CFB.h"
#include "OFB.h"

#define VECTORRANGE2VECTOR(DEST, SRC, IDX, SIZE) { memcpy(DEST.data(), SRC.data() + IDX, SIZE); }
#define VECTOR2VECTORRANGE(DEST, IDX, SIZE, SRC) { memcpy(DEST.data() + IDX, SRC.data(), SIZE); }

using namespace std;

namespace TestEncryptionMode {

	void TestRijndael128ECB()
	{
		vector<uint8_t> key = {
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97,
			0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a, 0x96, 0xfd, 0xba, 0xaf,
			0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b, 0x00, 0xe3, 0xed, 0x03, 0x06, 0x88,
			0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		ECB *m = new ECB(c);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
			
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael128 ECB block encrypt");

		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael128 ECB block decrypt");
	}

	void TestRijndael192ECB()
	{
		vector<uint8_t> key = {
			0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc,
			0x97, 0x41, 0x04, 0x84, 0x6d, 0x0a, 0xd3, 0xad, 0x77, 0x34, 0xec, 0xb3, 0xec, 0xee, 0x4e, 0xef,
			0xef, 0x7a, 0xfd, 0x22, 0x70, 0xe2, 0xe6, 0x0a, 0xdc, 0xe0, 0xba, 0x2f, 0xac, 0xe6, 0x44, 0x4e,
			0x9a, 0x4b, 0x41, 0xba, 0x73, 0x8d, 0x6c, 0x72, 0xfb, 0x16, 0x69, 0x16, 0x03, 0xc1, 0x8e, 0x0e
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		ECB *m = new ECB(c);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}

		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael192 ECB block encrypt");

		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael192 ECB block decrypt");
	}

	void TestRijndael256ECB()
	{
		vector<uint8_t> key = {
			0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
			0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8,
			0x59, 0x1c, 0xcb, 0x10, 0xd4, 0x10, 0xed, 0x26, 0xdc, 0x5b, 0xa7, 0x4a, 0x31, 0x36, 0x28, 0x70,
			0xb6, 0xed, 0x21, 0xb9, 0x9c, 0xa6, 0xf4, 0xf9, 0xf1, 0x53, 0xe7, 0xb1, 0xbe, 0xaf, 0xed, 0x1d,
			0x23, 0x30, 0x4b, 0x7a, 0x39, 0xf9, 0xf3, 0xff, 0x06, 0x7d, 0x8d, 0x8f, 0x9e, 0x24, 0xec, 0xc7
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		ECB *m = new ECB(c);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}

		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael256 ECB block encrypt");

		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael256 ECB block decrypt");
	}

	void TestRijndael128CBC()
	{
		vector<uint8_t> key = {
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
			0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
			0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
			0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		CBC *m = new CBC(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael128 CBC block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael128 CBC block decrypt");
	}

	void TestRijndael192CBC()
	{
		vector<uint8_t> key = {
			0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
			0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
			0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
			0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		CBC *m = new CBC(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael192 CBC block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael192 CBC block decrypt");
	}

	void TestRijndael256CBC()
	{
		vector<uint8_t> key = {
			0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
			0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6,
			0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b, 0xc6, 0x70, 0x2c, 0x7d,
			0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30, 0xe2, 0x63, 0x04, 0x23, 0x14, 0x61,
			0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc, 0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		CBC *m = new CBC(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael256 CBC block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael256 CBC block decrypt");
	}

	void TestRijndael128CFB()
	{
		vector<uint8_t> key = {
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0x3b, 0x3f, 0xd9, 0x2e, 0xb7, 0x2d, 0xad, 0x20, 0x33, 0x34, 0x49, 0xf8, 0xe8, 0x3c, 0xfb, 0x4a,
			0xc8, 0xa6, 0x45, 0x37, 0xa0, 0xb3, 0xa9, 0x3f, 0xcd, 0xe3, 0xcd, 0xad, 0x9f, 0x1c, 0xe5, 0x8b,
			0x26, 0x75, 0x1f, 0x67, 0xa3, 0xcb, 0xb1, 0x40, 0xb1, 0x80, 0x8c, 0xf1, 0x87, 0xa4, 0xf4, 0xdf,
			0xc0, 0x4b, 0x05, 0x35, 0x7c, 0x5d, 0x1c, 0x0e, 0xea, 0xc4, 0xc6, 0x6f, 0x9f, 0xf7, 0xf2, 0xe6 
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		CFB *m = new CFB(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael128 CFB block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael128 CFB block decrypt");
	}

	void TestRijndael192CFB()
	{
		vector<uint8_t> key = {
			0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0xcd, 0xc8, 0x0d, 0x6f, 0xdd, 0xf1, 0x8c, 0xab, 0x34, 0xc2, 0x59, 0x09, 0xc9, 0x9a, 0x41, 0x74,
			0x67, 0xce, 0x7f, 0x7f, 0x81, 0x17, 0x36, 0x21, 0x96, 0x1a, 0x2b, 0x70, 0x17, 0x1d, 0x3d, 0x7a,
			0x2e, 0x1e, 0x8a, 0x1d, 0xd5, 0x9b, 0x88, 0xb1, 0xc8, 0xe6, 0x0f, 0xed, 0x1e, 0xfa, 0xc4, 0xc9,
			0xc0, 0x5f, 0x9f, 0x9c, 0xa9, 0x83, 0x4f, 0xa0, 0x42, 0xae, 0x8f, 0xba, 0x58, 0x4b, 0x09, 0xff
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		CFB *m = new CFB(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael192 CFB block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael192 CFB block decrypt");
	}

	void TestRijndael256CFB()
	{
		vector<uint8_t> key = {
			0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
			0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B, 0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60,
			0x39, 0xff, 0xed, 0x14, 0x3b, 0x28, 0xb1, 0xc8, 0x32, 0x11, 0x3c, 0x63, 0x31, 0xe5, 0x40, 0x7b,
			0xdf, 0x10, 0x13, 0x24, 0x15, 0xe5, 0x4b, 0x92, 0xa1, 0x3e, 0xd0, 0xa8, 0x26, 0x7a, 0xe2, 0xf9,
			0x75, 0xa3, 0x85, 0x74, 0x1a, 0xb9, 0xce, 0xf8, 0x20, 0x31, 0x62, 0x3d, 0x55, 0xb1, 0xe4, 0x71
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		CFB *m = new CFB(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael256 CFB block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael256 CFB block decrypt");
	}

	void TestRijndael128OFB()
	{
		vector<uint8_t> key = {
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0x3b, 0x3f, 0xd9, 0x2e, 0xb7, 0x2d, 0xad, 0x20, 0x33, 0x34, 0x49, 0xf8, 0xe8, 0x3c, 0xfb, 0x4a,
			0x77, 0x89, 0x50, 0x8d, 0x16, 0x91, 0x8f, 0x03, 0xf5, 0x3c, 0x52, 0xda, 0xc5, 0x4e, 0xd8, 0x25,
			0x97, 0x40, 0x05, 0x1e, 0x9c, 0x5f, 0xec, 0xf6, 0x43, 0x44, 0xf7, 0xa8, 0x22, 0x60, 0xed, 0xcc,
			0x30, 0x4c, 0x65, 0x28, 0xf6, 0x59, 0xc7, 0x78, 0x66, 0xa5, 0x10, 0xd9, 0xc1, 0xd6, 0xae, 0x5e
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		OFB *m = new OFB(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael128 OFB block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael128 OFB block decrypt");
	}

	void TestRijndael192OFB()
	{
		vector<uint8_t> key = {
			0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
			0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0xcd, 0xc8, 0x0d, 0x6f, 0xdd, 0xf1, 0x8c, 0xab, 0x34, 0xc2, 0x59, 0x09, 0xc9, 0x9a, 0x41, 0x74,
			0xfc, 0xc2, 0x8b, 0x8d, 0x4c, 0x63, 0x83, 0x7c, 0x09, 0xe8, 0x17, 0x00, 0xc1, 0x10, 0x04, 0x01,
			0x8d, 0x9a, 0x9a, 0xea, 0xc0, 0xf6, 0x59, 0x6f, 0x55, 0x9c, 0x6d, 0x4d, 0xaf, 0x59, 0xa5, 0xf2,
			0x6d, 0x9f, 0x20, 0x08, 0x57, 0xca, 0x6c, 0x3e, 0x9c, 0xac, 0x52, 0x4b, 0xd9, 0xac, 0xc9, 0x2a
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		OFB *m = new OFB(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael192 OFB block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael192 OFB block decrypt");
	}

	void TestRijndael256OFB()
	{
		vector<uint8_t> key = {
			0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
			0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
		};
		vector<uint8_t> IV = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
		};
		vector<uint8_t> plaintext = {
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
			0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
			0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
			0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
		};
		vector<uint8_t> expected_ciphertext{
			0xdc, 0x7e, 0x84, 0xbf, 0xda, 0x79, 0x16, 0x4b, 0x7e, 0xcd, 0x84, 0x86, 0x98, 0x5d, 0x38, 0x60,
			0x4f, 0xeb, 0xdc, 0x67, 0x40, 0xd2, 0x0b, 0x3a, 0xc8, 0x8f, 0x6a, 0xd8, 0x2a, 0x4f, 0xb0, 0x8d,
			0x71, 0xab, 0x47, 0xa0, 0x86, 0xe8, 0x6e, 0xed, 0xf3, 0x9d, 0x1c, 0x5b, 0xba, 0x97, 0xc4, 0x08,
			0x01, 0x26, 0x14, 0x1d, 0x67, 0xf3, 0x7b, 0xe8, 0x53, 0x8f, 0x5a, 0x8b, 0xe7, 0x40, 0xe4, 0x84
		};
		vector<uint8_t> cipher;
		vector<uint8_t> plain;
		cipher.resize(plaintext.size());
		plain.resize(cipher.size());

		Rijndael *c = new Rijndael();
		c->SetKey(key);

		OFB *m = new OFB(c, IV);
		vector<uint8_t>::iterator cit = expected_ciphertext.begin();
		vector<uint8_t>::iterator pit = plaintext.begin();

		size_t blocksize;
		blocksize = c->GetBlockSize();
		vector<uint8_t> current_cipher_block(blocksize);
		vector<uint8_t> current_plain_block(blocksize);

		for (size_t i = 0; pit + i != end(plaintext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_plain_block, plaintext, i, blocksize);
			m->EncryptBlock(current_cipher_block, current_plain_block);
			VECTOR2VECTORRANGE(cipher, i, blocksize, current_cipher_block);
		}
		VERIFY2(compare_data(cipher, expected_ciphertext), "Rijndael256 OFB block encrypt");

		m->SetIV(IV);
		for (size_t i = 0; cit + i != end(expected_ciphertext); i += c->GetBlockSize()) {
			VECTORRANGE2VECTOR(current_cipher_block, expected_ciphertext, i, blocksize);
			m->DecryptBlock(current_plain_block, current_cipher_block);
			VECTOR2VECTORRANGE(plain, i, blocksize, current_plain_block);
		}
		VERIFY2(compare_data(plain, plaintext), "Rijndael256 OFB block decrypt");
	}

	void TestAll() {
		TestRijndael128ECB();
		TestRijndael192ECB();
		TestRijndael256ECB();

		TestRijndael128CBC();
		TestRijndael192CBC();
		TestRijndael256CBC();

		TestRijndael128CFB();
		TestRijndael192CFB();
		TestRijndael256CFB();

		TestRijndael128OFB();
		TestRijndael192OFB();
		TestRijndael256OFB();
	}

}